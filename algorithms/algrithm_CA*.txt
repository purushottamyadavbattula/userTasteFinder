Customised_A*
==============================================
Algorithm Customised_A*(start,end):
    smallest_distance <- infinity
    node_to_return <- NONE
	open <- List(start)
	f(start) <- h(start)
	parent(start) <- NIL
	closed<- {}
	while open is not EMPTY
	 do
        Remove node n from open such that f(n) has lowest value
        Add n to closed
        If n == end
            then retrun return ListNodesFromBestNodeToStart(closed,n)
        neighbours <- Children(n)
        for each m in neighbours
            do switch
                case m not in open AND m not in closed
                    Add m to open
                    parent(m) <- n
                    g(m) <- g(n) + k(n,m)
                    f(m) <- g(m) + h(m)
                case m in open
                    then parent(m) <- n
                        g(m) <- g(n) + k(n,m)
                        f(m) <- g(m) + h(m)
                case m in closed
                    then parent(m) <- n
                        g(m) <- g(n) + k(n,m)
                        f(m) <- g(m) + h(m)
                        PropagateImprovement(m)
        node_to_return <- n
return return ListNodesFromBestNodeToStart(closed,n)

Algo PropagateImprovement(m)
    neighbours <- Children(m)
    for each s in neighbours
        do newGvalue <- g(m) + k(m,s)
            if newGvalue < g(s)
                then parent(s) <- m
                    g(s) <- newGvalue
                    if s in closed
                        then PropagateImprovement(s)

Algorithm ListNodesFromBestNodeToStart(closed,startNode)
    closed <- reversedList(closed)
    listOfNodes <- list(startNode)
    parent <- parent of startNode
    for node in closed
        if node is parent
            add node to listOfNodes
    return listOfNodes
===========================================================

customised Bfs
===========================================================
Algorithm customised Bfs:

def bfs(graph_list, v,limit=10):
    count=0
    all = []
    Q = []
    Q.append(v)
    while Q != []:
        v = Q.pop(0)
        all.append(v)
        count+=1
        if(count>=limit):
            return all
        for n in graph[v]:
            if n not in Q and n not in all:
                Q.append(n)
    return all
===========================================================

formulea:
    https://docs.google.com/document/d/1iRIBdMKyLiqq7v9Bvp_vro13gxLV9Hdqt_4bLDXa5tg/edit?usp=sharing


    